{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spherical harmonics\n",
    "\n",
    "## $Y_{lm}(x, y, z)$\n",
    "\n",
    "#### Code to compute the spherical harmonic $Y_{lm}(x,y,z)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by importing some stuff and defining our functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Using sympy version 1.1.2.dev\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math\n",
    "import sympy\n",
    "from sympy import *\n",
    "from sympy.functions.special.tensor_functions import KroneckerDelta\n",
    "\n",
    "# Initialize the session\n",
    "init_session(quiet=True)\n",
    "\n",
    "# I am using the dev version of sympy\n",
    "print(\"Using sympy version\", sympy.__version__)\n",
    "\n",
    "# Define our symbols\n",
    "x, y, z, mu, nu, l, m, j, k, p, q = symbols('x y z mu nu l m j k p q')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMgAAABBBAMAAABmyfa9AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAiRDdVJmrRDIiu3Zmze8cCasWAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAFPUlEQVRYCe1YXYgbVRT+kkxmMpvdJC0sKgg7UPShRYwiPkewilpo6opSWTDdFy2LEPEH8aEbQYtUagdFsSJuKAjFPhisVfuDRHBR9MFQfFlw19UH6WMMsmtVWL9z504yk83upJDpUw/M3HO/851z5t47c8/MAF2Z2ohLuimAYkCPSzXKcUUOxDWr7LgBwFMzqtmMh4mKZYcx9jznAJyingAmP3aSnzoaz7RgSG7inmSml3y119JFsQrY3emhohG2fg9CL7FzGAnXbOF5jWceLwIHFa6RBCRnWJQLWaYLi/yQHMR4KO8THF0BKTdzFZMkmkI26HS7wrVrtqkV3QhLuZD1KkdcDpvpbLSDEOOZNaSq9jp+IT4mNkky4QquJfm3r3mtsJQLWc+Q2wyb6WwFk2QqpAvF6OAqm24SXrzCxQZjWjXdk2KJC1m8oLyrLYvfXyxfPA3CNuGuJErAO9JLNTKrbLpJjIqHiw2zuWby1p1KVScvSaoBoyLR3vIt3/2HP5wveFGVZMvH2KYc4BXpTyJbZ9NNYtU9XGyJplkec3aL6omXhGto1cnDBQ3be4pYxwGBQbgrH1CTG2y8jLEGnl1eWV7m9fHqeBsTf/gTipN3zEYeOUd7aRZdyLIqwBkYwjsFU6bjHuVc0GRpLvE4xuM5vJx7g21vJBWFEwLu5Cp/hFRtcd/iCzcLoFh0gVXJ1IErNQEpuVq2brdrhFXXP12msoupf77/VD5L3UuyyqEVBPck5RyHJHmklSvdJ5CwxIWsJEfdbng8LHAs4/UCYbmhfFHrw3XJbWy00zcRFXd7eq2BdFWtlyLac49Cpsus7QKfK48lLsK6GzhQVTSZ+AnXPuQQtlY1xGZcriFb6gFqJNKdCOOQhU9hL4pCDrI+F3af0DkgY6506j2k674vjCM5cwsf5C8xJx5BVlfvBYE49+QOpQYwf0tNlmkJ4D0X0YIsoxm2saece6haRhhqPD2UWtbhaQAeInmsh8IYe8pZod/KmRtPnGKtSfQij3w8Nb7N0B+u8GTIzEfL5tmsRTsJozZFoskjWhKbSh8eBI440Z440dCbfCT3MKxiHynt4qdhkuRawIt9vgO7LJyq9KmiqRnJCvYPJPeBZgfeHtGHb+pyTlXpCz11S5jfRBwAGH8N+WLHAqlKnyQZn3nzXPZCTXZvVeoGxA1ByTUEt8qQLdRhNFX6VJL5Zm42WwEegLdZhJgDOiuQ2hstLJyq9EmSt88iX00XpJqGZm/LKFM1TsQQwgJ5Bn7RnOOoUiXgeO/Nb9sQJwpSe6PlmC596tKvcFQLGa9kR7uyVrak9kYLC6QqfZLEbmMOPySAb3A02pMMsyO1N1pYOFXpkyQs3kt4b6fc/EeiPckw/uXjOIT4hVNNl88fzpWlZaPhu2zf1j1zMMmASrVFjF/dLQx9sC6QfjkU6219lK27Z7c2hSwDCuRnIcJ2nfe3M96wBWcgnroejhrMd0OPaQYWvDmPKboO+3Rc4d998rQf2h52V/Qdhm357jNV1eR0aViva+SZ/Apb1T6sXvFIrgjT/x3xWDwp+FXX6SaRT9DYJMVXTZFEE1m5h8ted7Tn+YIXj0uy47XzP54cbXQd7V7dXkKmlHC/iiVHmtNjVRm6yGMMs7EkOceoX7f4tdmgclSlGnkefvGdtPes6w+mGei7YLR5XgfOI/mPvDPyLarDX02jF/uuHfLb8ylX/qEgW8Rvo8+BCT4YTLJQ5l8jrnsTh2JIokOaHb4Rxy2ZP/fGnYLxVy5fhyT7y9chCf8yX7P8D8AtKK5h1moHAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{\\sqrt{\\frac{\\left(2 l + 1\\right) \\left(- \\delta_{0 m} + 2\\right) \\left(l - m\\right)!}{\\left(l + m\\right)!}}}{2 \\sqrt{\\pi}}$$"
      ],
      "text/plain": [
       "     _________________________________\n",
       "    ╱ (2⋅l + 1)⋅⎛- δ    + 2⎞⋅(l - m)! \n",
       "   ╱            ⎝   0,m    ⎠          \n",
       "  ╱   ─────────────────────────────── \n",
       "╲╱                (l + m)!            \n",
       "──────────────────────────────────────\n",
       "                 2⋅√π                 "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def A(l, m):\n",
    "    \"\"\"A spherical harmonic normalization constant.\"\"\"\n",
    "    return sqrt((2 - KroneckerDelta(m, 0)) * (2 * l + 1) * factorial(l - m) / (4 * pi * factorial(l + m)))\n",
    "\n",
    "# Print it\n",
    "A(l, m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\frac{8 m! \\left(\\frac{k}{2} + \\frac{m}{2} + 1\\right)!}{j! k! \\left(- j + m\\right)! \\left(- k - m + 3\\right)! \\left(\\frac{k}{2} + \\frac{m}{2} - 2\\right)!}$$"
      ],
      "text/plain": [
       "                 ⎛k   m    ⎞              \n",
       "            8⋅m!⋅⎜─ + ─ + 1⎟!             \n",
       "                 ⎝2   2    ⎠              \n",
       "──────────────────────────────────────────\n",
       "                              ⎛k   m    ⎞ \n",
       "j!⋅k!⋅(-j + m)!⋅(-k - m + 3)!⋅⎜─ + ─ - 2⎟!\n",
       "                              ⎝2   2    ⎠ "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def B(l, m, j, k):\n",
    "    \"\"\"Another spherical harmonic normalization constant.\"\"\"\n",
    "    # NOTE: The factorial of a negative integer is +/- infinity. This can happen in the denominator\n",
    "    # of the expression for `B`, so in that case `B = 0` exactly. Let's override the error `sympy`\n",
    "    # throws because the value is undetermined and set the value of `B` to zero directly in this case.\n",
    "    try: \n",
    "        ratio = factorial((l + m + k - 1) / 2) / factorial((-l + m + k - 1) / 2)\n",
    "    except ValueError:\n",
    "        ratio = 0\n",
    "    return 2 ** l * factorial(m) / (factorial(j) * factorial(k) * factorial(m - j) * factorial(l - m - k)) * ratio\n",
    "\n",
    "# Print it\n",
    "B(l, m, j, k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Yxyz(l, m, x, y, z):\n",
    "    \"\"\"Return the spherical harmonic of degree `l` and order `m` as a function of `x`, `y`, and `z`.\"\"\"\n",
    "    res = 0\n",
    "    if (m >= 0):\n",
    "        for j in range(0, m + 1, 2):\n",
    "            for k in range(0, l - m + 1):\n",
    "                res += (-1) ** (j // 2) * A(l, m) * B(l, m, j, k) * x ** (m - j) * y ** j * z ** k\n",
    "    else:\n",
    "        for j in range(1, abs(m) + 1, 2):\n",
    "            for k in range(0, l - abs(m) + 1):\n",
    "                res += (-1) ** ((j - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * x ** (abs(m) - j) * y ** j * z ** k\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's compute and display the spherical harmonics up to and including degree $l = 3$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC8AAAAyBAMAAAA+QZ/aAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUMhCZZs3dIrurRHbLQ9+lAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABo0lEQVQ4Ec2Uu0oDQRSG/2ySjUk22YAW6VwwEBCLPIEEjLauFkKqLKh99AEkaGchgthZbOOlSxqx3UKwU1/AB9AiEcUggq7nTJzZi6QUPMWcnf+bc5lhdjDtvyBumu+XMNlYjOtINxZKmBLyWrUi/IG9VOOPlAR7aLosyMQSZErQOgx2b112KiLvIfnGgscDmYwwPRReWfB4IJOg5aDwxcLNzgY7BboWUmI7l+jeR4DzA4D8YRioVID+EQZUPMnFjQ60zzDI95DhdhMd6KJt2RVtUO8Q0IEse9UVjrBST78j52DLjYDV/jVwApzNbbIeRIhZaJA1QtLo818D04/Y819uMDcq9buGIS4Cn1bsrC7UYcbA+hiQFjdHwGiEXhsT0VR6rHgVGFDDQ+KRVFRCq8yfP7lxUGxjAbPFOulBxANNsqz0DJudTFUs06TPgiewAqcDOgzehd42IxFo0a22CLRsk5YEqfivyPLSRyQscioVckNss3AFw2IviwN39jEL0gKwPONIkX0AJsqiGwkDkOQTCoyAfJb2A3X0LMn3JqSDH7JvMYBw4ogWAXYAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left [ \\frac{0.5}{\\sqrt{\\pi}}\\right ]$$"
      ],
      "text/plain": [
       "⎡0.5⎤\n",
       "⎢───⎥\n",
       "⎣ √π⎦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAR0AAAA/BAMAAAAvVwHBAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARM1UEJmJZjLdIu+7q3bM4UB1AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAE5UlEQVRoBe1aTYgjRRT+Mun8ZzIt4kkkEcWDggQGL16mQRQG3Zmwu8N6WDAgzCj+kJMeFpYFEU+yA/4dRG1/doVVzOwiXhQccY/KjCDqSXPxH5NdJ7vqIBtfVU9VuruqOilmBrOw71Bd79X76vu6qjpJP4LqYFDDZNjGYFBHdXbWnQw5uH52jvRMiBguo3Q16flgwOyCxfrZI9qcQ1Ikrs9XMm3czq4RSXqKtXFliLzdI5L0ZOqCZ9zr7hFSz70rj3DWO71nhYx54PTy50Yte4QoLj8uCIlK6rkF8z6j/nRwmV2YHUKxgblW4KjtHiFOIf3XcHKhJ7eGbI2Fb/veZxcyZxWVLcysBp7S7hWiV8c/w8mFnvIm0n0W3pRj2RZSZ7FYk4FoZ68QN7rOn8OZhZ6ZTaS2WHioh44PmXG/9g6h26/FBlJXGP+3xx9kF7KfWeO8DOfHDt7zmBOxBARSr7rPRZK5Y0LMN4GFP978qUNZYn3aTeT5QT6PtouUS0Ps4BQfPYxseg096scsAYEHukvrsXRyDYjTL3lwmrnXCzXKkXoaO3qA8ip+p6FKh4aBx9y3MzV8wfuRpm1GwMP7kdzAMSGyZ5H1sv20T2lCj1xLILNdXLgIFIJJSh96pQ74VgYB0SYggPx5kRa6GhEfew6m1nmm0EOnM83O83QN2Ytw/gWeIq/oo7yFqpf/mydHmiQEboqk7jh6xBlgow7MdHiW0FNeR44976UaMnR9yMeL5M30mZ6DqKzx5EiThEhvRlJ3HD1i4HE9J0/wLKGHPt3omNBm0UbRtd3INckrraOwjS9R1syfhLgr/LlB8wSmR3wCvOGnvR4qHqUJPXgB95+gDyb6hjjm07b1C2w018JcB0dRbZETNzMi/8rKr248nXwt4mmkr6Ba38C7DCH13Nf9DngNOPXEYQrnL9Mtkt2w9Blw4EnaPtXMiAyO3azmA1pEaumoiwPdhSP8nqWeGP6OW8OBg2HH0I8iDEmRsA5h0jPXkNDpmkOP/0gLIUbmBgk6hEnPlC8nLbTKHemYOyGEOSkyokOY9ISAqa74RgsF96s7hp79otbOe02PdllkcFLXh78lJjXyDkQnKZmNXRCJ8joKwSCTuj7yJv7nztW7PsYXH+OK2iPM56fYC07fkKzAfqAlmD0CQa1lEJ7UtF/TbjiL9+9WIpGAPQKa6oxJz1sRLu401VA4Yo/QVWdMeg6FqXjf6SihSMAeoavOGPRQLSFuuXgg6tsjELyQR6cx6NFJjwLjnj2C6jmqGfSQ9Ap7wBoqwhCxR7B6jsJh0LMCLD/z2/EzBnJN2B5B9RyVQ6+HpOfrWf8XDa8hZI+g46Ph0OuptIi2jK8N5JqwPYLXcxQOVc91xMZrCc9Dfcg0SgB7hKznKByKnso54uwy3iPoa+njQXvEsJ6jcCh63um5QSnK6WOc1y7AHiHrOSqHogeLVOlo0hpUVvFRfCn0vj1C1HNUDlVPZhu8llBu4Rs9fzxqjxD1HJVD1VO8xEtRcdIE3x4h6jnqpKoe/OCN+KWjzGKP2KnnKDPpfs+ffHj8b4lgQnuEqOcogjTrM3XOU9KSA/YI6GotjESjJ30pmV0dtUdAV2sx6MHtKuOIiD1CV2sx6RlBvq/Dmv3aV75Rk1/Tk7xCk7g+E/Z/knsm6f8ks/5/NVYjELzSAEAAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left [ \\frac{0.5 \\sqrt{3} y}{\\sqrt{\\pi}}, \\quad \\frac{0.5 \\sqrt{3} z}{\\sqrt{\\pi}}, \\quad \\frac{0.5 \\sqrt{3} x}{\\sqrt{\\pi}}\\right ]$$"
      ],
      "text/plain": [
       "⎡0.5⋅√3⋅y  0.5⋅√3⋅z  0.5⋅√3⋅x⎤\n",
       "⎢────────, ────────, ────────⎥\n",
       "⎣   √π        √π        √π   ⎦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAzQAAAA/BAMAAADEc5AaAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARM1UEJmJZjLdIu+7q3bM4UB1AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAK7UlEQVR4Ae2dXYgkVxXHT8/09HT3TvdMXkQfZFoighHNwJCX+LEForDo7gwxm4hsSGPYDwKJ8+L6sLBpDCIBZSZRkESM7RdBI8y6ivjxsPOQIIGNTkLWKILbD64xG7Kzm0wWXdT2nHvr1v2uulVFM23ogp2+99T5nf+/7qmu7p6pZmFxOOzAZBuzFZgbDt+ExeXlhTHzNbEDleVlbM1kIcZzBX4+ac14Ngbg/6Q1R5+NxnUFHb7Kua0duZPVTGlNc2eYbA79jNBmwg4zMj27Y3m2t9ZvdTxpdrg5YNJX7T2OSLmDpIJ2hSJuFcv3w4vMaEprWqXeHbzgWIdcIVW+0a/fCIZVMBPKleysZlco6fYJWO+TUkprvu90EhhsdgITvWmqfGOhec2baO5QQXOfNc+VbNEUsCuUdPsobLInRUprPuN0EhicWQpM9Kbp8tO73kRzhw6ae415rmSD5VNXhZJu90dUOm5N9a6TPZpO/a0upKobFNBCPGD//MTxEyz4oegroiMHeJZSz8ZYRCg/cuHYsa6SjvLKDBoDkxdg8/D5nppKvhUjCiYIpW74QQrYJUcaSlHI6ZZZVC0/ySJxa6aWqk/QfN9w2GVxADrvp3+hheI91sPNcKBPwXPD62IfNjgMFsoP4Qvhti6vzOCoKJw8CvAg1K6ZvhUjST6uXpmDFLBLzjrSfG7hw5G2drVVZjpuzSmAz9N86oHLLIw/8Lw/eA9eRpSQ2GU8zp6BWodi7/trnx5ww7MxEBbKnwNoqVooryjPcre8OP8pwJcAfqum0vNVGnERSt3wg0yRs440n9vqhYuRZvmL3HTcmucB2AWuJQ/lOA7b2BolJHdqo7lt4BfX7SRcWwuFhXIX4ISqhfKK8jvgnUnteCDAXwNc7Cmp5FsaUSlBGMlhBylgl5xZIadb2IlUy5VupUe249b8B2BxCafSNbsKm5pE2Nv8NlTepLBcETp1w2ChDFAZGPLSTP3m5WdMXQHeGmmtYb6lEZUShKyb4yAF7JIzjjSvW6M1X17+SES2eWuqb2FrBjhtfelSDx9wa6/RD3rWsNCh17/390H10gCejmivtq2sQuW/FHn59GfjHa/gYwLH2Lt+Vqea+pYoA8wJLcogea5MGL7qXNU5UED4bmT4lkYUKiGM5MQnsIOEyrcXvqpgfJjAOLXkjAp53bLWkGW+UOeG/EM6b00TX77Xu6g6F9EHiJtw1MB/bHVZqNqdfbLRqU2fgR2K69tmF+rs9f8ZekdeWcC9G/iPDDOYY9XfXzqiczRLlAHwSqTLc2UnpoGV6wYIzIgplkjpKtInP0j49JXDWyar+rTlkiONK1h0Os5aQ5b19Y1bg88a1hos+hy0z+LDFapPmrg9B7Wotjvd/8FMB86ziPZjczVuDa7tBrzWQW6ACQnMsSo0tzBqbM1EucqfF6o8KbsxbE0CQmObiuogGjE3hdCSE5/8ICGCn5pohpxZISfOWkNrp6+vcUHDovf2f7izwM97sbr39qswtQUQ7RsAu3Lp2skFDd9x32gewqdd8pRj9QT2tUjnaCYvFO0O26vKkxkAF6aCcNgBzti/2JFSqQcJULde1zLk4taIZWJ29B+KtsPtTkTZMzfEQnGWtwbwRW7/EkbwF2tfWICVLZjt0n7S5CGYH+B8Mar/k+L6hm8DpultQKtDHzGq/wY4SQkS5liFndw6CokyNLaElpDnym5MAdurJsiNmEqJVMZBwrstEgNihcCWU46UL5ODT8PpWcMta+sbt+Y8wEMRVjyLJ1SE/YMGzZgmD8F6D+d3QPsMxfVtDjtJV759HZjBRzzTv0kJ1BoOc+yjOhXPhDKsYOd0eT5zY0BXVmYZboNmXwdjI6aeIPRkxSc/yGnnKSRgh5xVwRTGeRpOreGWtfWNW4MfqO6ggngCPsYurOy8Z5osNB3tQDuC5wE/w1gbfuTEFyF8RuKVDB83V+VTjtdj2PSq8t5Y1hDKsI65PB1fFJg8m3kwAAHWV6Hd18HYiBThI0HoydZB3qZ+CkhqCNghZ1VIIDlIw6k13LK2vnFrGkvVX8FKB34Es7/Behcjdt4zTRZaXPoDPAVwBBbXpFwy+gZ8qld9A5qrcKqP17Vd+ZTj9Rj2yMnTjyaEHAhl2I8rpsuzmQfDsyC2/ONjR/9sgLERKcJHgtBVzIOsf+v4qwsmmipnVrDhdJxawy1r6xu3pvrg6z16p9O860KEldfvw3XCp8Ff3niZhw5eOXQ3NuXgg/S6bG2fvPIngO/gyj5wJ+6rX8fzToU5tjp71nHEIJTh6SV8umrybObB8IU5tnzrcPgvA4yNmD4FoauYBzkDp95jkjgXsEPOrOCg03C459wH17hlbX3j1hjVps5GRkRM2WVPTDyPH3ivtSMEk5BfXuY4R7nAXMnl5ewKLgPKQrlbM/2WXQgjrU4V3xlnbnRpUrdATCIeeZngG+UCcyU7FUtWsHB9odytgVucVhprcwPnDj041dfngZgCueWVBN8wF5gr2alYsoKJ6wvlaY3TCFSuiN+Rufd7ogUxT7W3cVhfqFyteRuvyhge2qQ1Y9gUbmnSmklrxnYFxtYYf9bMs5sHw35ctY4ljGNZFpxDGXWr738ct8d6OMwELZuZhHIcpWBWByvkcato05DWaXJBs7owLoFJa8alE5aPSWusJRmXQGprNvkV0PSKv6EO2Nww/oI6YHOz6WCTm5WvZmFS4NYKhPFPIO41Svcq96bgqa15QZZQRw3+FwM15Bh74McjR64Z8rBmmjZvLWhTnARJgUcrDAYfbnrxzT3qlJ7WmmbHU/B2T1wN++DpvprlHvtYd3Ycte/YD5ECn1YQjH/G6KSaytqZhqe1hu56dm5dZ1QP+uCanuac+VhnsgjiXdbGFiLFbu02ODYNgvGvUr41ctW0Y2l4WmsO2KVYpDrw7FDDPviQmuQZ+1hPOguzGzH1hBApurXbuQXB7M5wJx4Y9KkTntYa+zzkgrMhuj54LQD2sWmo4/wLkQKfVhAMXjzNqrLPp04pKa1xnIdK0YxhGbgQm3b+pXgtpCXrjRJPaQ3e7d+md4ar0kn4qAxciMXbcnfQrPvPs37fhbRkuVHiKa3B8/DYw5dP/0QayTEqAxdh8fStnfjYU5f7OTxSahEtRWKUeEprXoH6Uq3/D8VIjmEZuAjbXoOH4f52L4dFllpES9EYJe5uTXK3/xy8pBgJG5aBC7E3oa8GedtqRfQQuBXSkrVHjrtb81oH74sdoI2vw4Y0EzgqAxdhky821LdZgwJtyq80FDlIGD3ubI282/9u2A09UpFXBi7EJl9smFmbj4SL7MdCWrLs6HFna5K7/au7cE26CRyJrwoUgQuxK/EXG1ai+YVAj5RWSEvWHznubo2427+9Ab+UZkJH8VcFCsFFWPHFhldhXzfUI+UV0VLqjxr3tCa+239uDf6omAkcloGLsOKbBb+DVjfQIksroqXUHzXuaY24219xEj4sAxdixRcbwi2yzEJaUmPUuKc18d3+0keeURm4EBt/sSGPR8otpCVFRo17WgOOu/2lqaxRGbgI67rlPssj7S+ipdQdMe5rjXm3v+Ioe1gGLsJat9xnW2QZRbSU0iPGfa0x7/ZXHGUPy8CF2FuyPbkyCmnJQiPGfa2RBiajPVqBSWv2aOGzZSetyV6jPcqYtGaPFj5bdtKa7DXaowxszeS/e9ijtU+TZf/dw8cn/91D2hrt0T787x5u/x/IlQhuCvQbrgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left [ \\frac{0.5 \\sqrt{15} x y}{\\sqrt{\\pi}}, \\quad \\frac{0.5 \\sqrt{15} y z}{\\sqrt{\\pi}}, \\quad \\frac{0.75 \\sqrt{5} z^{2}}{\\sqrt{\\pi}} - \\frac{0.25 \\sqrt{5}}{\\sqrt{\\pi}}, \\quad \\frac{0.5 \\sqrt{15} x z}{\\sqrt{\\pi}}, \\quad \\frac{0.25 \\sqrt{15} x^{2}}{\\sqrt{\\pi}} - \\frac{0.25 \\sqrt{15} y^{2}}{\\sqrt{\\pi}}\\right ]$$"
      ],
      "text/plain": [
       "⎡                                   2                                   2     \n",
       "⎢0.5⋅√15⋅x⋅y  0.5⋅√15⋅y⋅z  0.75⋅√5⋅z    0.25⋅√5  0.5⋅√15⋅x⋅z  0.25⋅√15⋅x    0.\n",
       "⎢───────────, ───────────, ────────── - ───────, ───────────, ─────────── - ──\n",
       "⎣     √π           √π          √π          √π         √π           √π         \n",
       "\n",
       "        2⎤\n",
       "25⋅√15⋅y ⎥\n",
       "─────────⎥\n",
       "   √π    ⎦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABvkAAAA/BAMAAAA4ZblJAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARM1UEJmJZjLdIu+7q3bM4UB1AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAVuElEQVR4Ae1dDWwl11U+Xj8/28+/VQUCoWZdFSEoq9aSQUKFsk8gIq1C1laSTRAk7BMQJ5RmYyGRCCIlFlWKKoHWDaFVQlMehTSiRewmjRDQQo0Igoik66K2gVZJrCrb0ETd3STbhCxNH+eee8+9d2bOzNyZuaotZUbJmzt37vnOd75zzrzx81sPHByNlqDdWgVaBb63CpwZjZbh4MrK4vfWbeutVaBVAN66chi7rxWiVaBVYC8UmGm7by9kb322CqACtbuve/01cQTsnv1SHKCIKDf+az8iWiWoEzfsmWviGS2vlaLOLI6WgZjxxCtVE15g9/3NyG4XtFLvg//MSBYw0du1QCONdB1cH2BHS045WxoZKqHm2XW98w7RO9sdzi15hyHDrEAhVnqNYUEHExsT28GWvmGwES/MYVw9rzkisp/ivW/s5bROBhZcLj2k6vEw4axAFUrVgPjhMS7uObzA7vuiZ6qH98PJYWayfGIu8wHPtXBXuZlekWURapmzLsuGFk4Ppy7lWORNN6Hms5gYTIZfU3zDPGK58zmMq+e1EYsc43gZqB4PK5YVqEKpGpCS8MK6r7fElOz+w3Aq00j2ZP7gE8Kp0Pc+gYWAVmVKYoP204u9l6rAADSilmRR4b0vaRiHcfW8NmEBOcbxMlA9HqOjmNLQUuVclIQX1n0Tywzn7Q/3vYPQ4dXZhZ2/y86JMyILcWXopMBGm45fDIXQ6xpRS7K4YjPYddIw2IwW5jOumtcmLCDXOF4GqsZjdJQECi5VzkVJeNx9nWtv21QmvfX3L8OHvry+Pjjw3JS1PQJTD1y7vg6/cNPNjAvwcTf0R4xEc71jT2yCh9TZyiJ9fdc35zG7elf/bm79I/ocOfAw2ULcWzbdEzeDwAZgak3PJ8yndxOHeGCB1Ik0EBC1uwEevP7f04aZ47QxakKC64Xz78oYsOt0WpKGuWYghV7AOJtXJkAuBPo5InqMGEE0xnV0PpHTbAY0HNcFKZ0tDgEpG48hxqToMM0MBcrWvFCqzOeT6/9iDDxSnKGEJ3Knw+PuO7DcuV9NPwjjr8Fd+FPrzsxoNKCF+HI1TOLUG/AOODLkue4aj5J7RoLxRwGuhO5L4CHhBSWLJL6ds6vPj15lfLwYKExy4GHyaXHPbDpvh6skNnibua3nE+Y3Jo7UAQOJYelL+MegswO35t+PK/K4CZqQ4HQSIHvnya7TaUExfUNjb3dsJoaez1jIKyOJsSOLHBEtE6eeEHtOTrMZ0HCmLrTSyeKQkYR4DLHCsMSaFz4gNHx6a3B4Q5e2R4ozZD1ZSXR43H13APyaOnV+GV6HXwaYgwO3vMBrsYUnhgA7k6ehuwRm+x0epPaMdOUNePf2JYDP+kj4HjExTCOd5Dc3D8m6+pFncD1tyIIwyYHHzpyWd8xmdg2ekNgAvLit5337yeyVhYHEsJAawPznYK4PM6d9IH9MljghaEKCm7VTr/hGasyu02lBMX3DPDMx9HzGQl6ZgBg7ve1LIvp8GEGIXc6pkAHC47rQSieKI6c6hHgMMyYlhiXWPGRKlfnMvwILWxNDLG1wpNQNBmWIPRnHACY87r4nAej++IcWOy/DAOBm7D+7dTegix+Tbs7ugL0dHxuMbdoF/oCRYB677+8Bnt30kG5CmCQS3kqf2vDt9di62rHnkAVhkgMP0y6QBszm4BDPCmyg99vbet63/n74Af9QjRlIDEtRg4cOwcwWzP1v2tIeK0FwE1gMlOC0XbHZe02P3Cu7HqTSgmLSlFuZGLGZGHouYymvjCTGjixkEX0yjCDELudUyADhcV1opZPFISJJ8RhmTEoMS6h5qVSZz9jDsLpEpY39ZzfOkPXEZ0x4M+a7Lm8AHFymc3jnCTC263cfXd7gMljYgTG+Mv/+ys/0GSuxt0iq2N7dT3QfXXEhiXQ/3CEAWVcuFsVCYZKDuYTP/ANm8x9qicSme2Bbz3sYU+9Yecw7pCEDEYUUkP4hanAIDlwM6L6UsdYEBadtejj5qB65V+s6mZakoVvOIzaTQs9nLOWVkaTYiYUkItOgPSNIsUs5lTJAQFwXWulkcYjVIcVjqDEpKSwtULJSQShV5oOQhzfw5TL17sebzZD1ZM5weKb7Ot/G7tulc0cGuJvFe8/bz27SBMDztN+G1TUY+y50zn31shPw+dEIOmd34dN9s8jsHJK51P9Z3yHNK4IABkmbf/AbXzWm/k67wpmn7vwlM69YIKZ2oDE1laO/Cr1H4QcfntLoPoxl8/IHzy6qExk2v4fdR/MmGAWDP1ReUJPeZoEoVXjCByKBJoeH1Prpi6D5eMZmaATBI99Ya4KCUwRTJ24ZmuW8c66TaXGGY3+6+Ae82u6tmRR6irHWkQiovKY2iyTFTiysiHD0W3/+jd2UPX6o4sorG3sqp4SgMyCk1NYFKZ0sjlR16IRSPMUCSWGJNS+UquPT+YgKe9uvWM6QCZ8iI1ZXmAIz3dfDjzZODpT5J/+kj6/4ljnbV7/0GlM1u4X/A74VnxrA1KtwOfzu7j1qBrrjp+E8jdyLQ9LFNvaqQXoLrpmmdYwkmTOQdoVHj6nfK1oWiKkdaHaayuCnYf5C5wtnhU9vmE3n5Q34DKJl2HR2qftwXrORYfDeygqUCstSOwqHFPmDAyA+apzatCVOZliQ4OWuXVqcmJgp+MVzx7ZTvhzjTOgCY61jOYFU7MzCidgZTH58eimXC57Ixp7MqYcg8bF1QUoni0N1kVcdXnkVCqTvqDxmViCp5lOxWT6937wGT2Fp64oF1kalVpPSkXms7Pc8e3hxOjkg5O7DeK3Sl/7H8TOJJSS3q06sApxaU933G3Br/z1qBv5iYgk/y0huDkmnanpHnX8c5h/B3Tlay0iSOS3AF+2Kjma3HAulL1NFdkSlt3wVzG53oLfNxm7PizujPvxKH9s/zaYL1H04r9nIMFjL7NVcKBnIURvo7nsANB/HwY60IHjIxk4TJXi5a5uWpCH04a+tEztgxunQBcZaxwACOSl1Inb73YvjQ8uBB8wFj7OxJ3PqIUiCeHXxgEL3i4O6j/P0uF+dhQJx9zEzJ5BU8xyS2Xt8fmuRmkSTSmRIh68jSxR99s4TPtuH+SUCPz7sHX2J37G+jth059nXZYYr+jO78F1a6V7cTYZO1TGD9JfnkdwWHTCSZM5A2hUdTVxyLBDTOjg+xLI7pKr2n2BhF+AP+2zs9nbx6wB3IYEMm5/S3YfzzEaC8e+dkmFZauObJMvEmuXjWJiRtsSDDAsjeKnrJUI6PnRi6kxNPWZceLu80AXGWke0LSWAP3YL9J2IHS2nR4OGlotgrHrGnj8+TCBk+bi6QKVx84sjhcQJVcsKBTIXVM6KFQiAK9UKpLASm+MDM/gDOxrgNnEJEhnS4enIfFb23zjgz4X4T/0APgVwZln9Dkx9ifrWReh8B+A2hQgfA/Wpy7j61MV23MH+VOYjPkbSMc2jRhppdRsmBwrIIUnmtMK5mltSvzG0LFQBkwONqamMXYSTmzC2Y0wTO2ZzD3bfBmTYdAZULmoeNBsZxnhV0NRDDoipXQ7UfWdxheaj1iY37j5nbDVRgudE4Ll2aUkawtuSjvRRXugCY5PSqrEbFr6IdB3MsmEu2QxoQem8yam6kupN4MMlCIBKp4qDUuMheeX1Nob0946Uuqi4rLBAXqV6Ne8juDrtDWEWWwObRJOCRIaMJ4rMY2W77wmszj4Cj/qq+1axkh8BOI4z+A5zr3LYQYRZbCAk6jruKpg/rU76GyPpMv1J6A01El4QpvtqoUOSzA2UcQUzSzCBLpmFKmByYNgRFbz/fRHgvcYyuWM2X6P3vgyb8aeffvYfd0HN42/jVTAyjPGqsKmHHBBTe+/TT//fMzC+htcvzSfJw1riwBlbTZTg5a5dWpKG48o6s+WFLjA2Ka0au2Hhi6iug8LGXKTY0zl1CAIfrgtSOlUclBqvOlx5FQuUl1KvUr2aT0bHfBYuqu5TpW1IJTJkwqfIHCv7c5/6je5VCvdz+IHcEE6uAeB/9+DEqTX9jjX1bfwd4WlVWT8xfwGe0xyehNlM4hmJYppag/mhRsKbX/0m6pAkcw1sXOGbON74LjkWKlPkQGNqKsjhSZWNOWPr75jNSfy5DyQ2MLOt5xEDgXJgjFeFrCh4QFYg0u5ugBcUzJM+Bx5T3yaMrSZK8HLXLi0JQyxp72Nu9mZTmg5dYKx1LCeQit2ysCKO98/DfN9SsANOgyecNU7m1EOQ+OgSRFyldKo4KDVedbjyKhYoN6WuUr2atzHRgPlgFU1fAmVgSNnwVNKIlInMsXLdN72Mv0tcXYLbYRzvKw+jxYMw+Q/oYO7idF/5GUdg+GO4YnPsldkLvQ01BfjFm4NmpI/VKyNRTH+1fuN/M9Kz/XtplUUSzRlIucJf/OM3eO4YOhYqU+SA2BkqE9tjr8GHbrvzw2zr7ZnN3KDzGZDYwMK2ntdscmAKwmKBAL4DvY+s34DfC1J8hE2RR4klFkrwctdeWlhMNTX10Zu+uZj1lxt6hrHRsZyAikCib0U8uHwGHspSsUUhGSdz6iGIfLgulNKp4qCKc9XhyqtEoEylskC2Uv2aT0Vn+ExuwOFdahJDCvwMESkTmd8zM+a37Z0T39pUn0eNHbseE/npZfyU79ov99HT1Kt44cCtpz6wv/zcf0HnmefO3k5T+JXFE3hLmNoYaeJrLz8F7x6NXmekk7+OlYKbRRLNGU25ggfwInDLNThlWBAmOSB2hkrnK2cvwdrkI0IFArOBG2/YFNl0z7yxQSw1mxwYvF82AmXCYoHg/aOnDoxGoy0gPhyH25MlSixpogQvde2nhcVUhhNwx9udGztixpnQM4yNjqUEMrEzCyvileeOXrdhGbgBcxFiT+XUQxD5mLrQSieKA1JIrrxKBMqExQLZSvVr3gVFI67T7zv2z6a0NSlgbVSGKHwTmd8zM6V/1+XHfzjlL3FIt6uJmdyDA4/0M+eCzYtZ4P1w1a0Rm4QzgVowH4lFAjzvoLahAhQY5/kpnm/EopFxglduPMHllYCLI1B+eI5Vefepe5ucbW6pg7+QCN3ofdxfXMW8gAV+prq66OMGjRuxSXjIUKvAJ8MigVxwUNtQYWYYFzgqPNWIRSPjBC05nirllYCLI1BOeAlW5d13YJii5g6nN2Z33VHp6J2pFVXMC1jAR+ELKeSQwyZsEvgZalX4pFkkkIsOahsiaIZxkaPCc01YQCNjn5YcT5Xy8tFwLAOmFpUdyuElWJV3X4GTsXP8HcyCRfmnGppb4MvsF1LtVI1BLDb4TdsofGqE0Jr4CsRLqI/adJxg1aj7mjJp7VsF3tQKtN33pk5/G/yeKtB2357K3zp/UyvQdt+bOv1t8HuqgOm+Bfw1cc3tAvLv/Nh9uN2zicNaSAojudUjk8GpxUb7Rj5NwkqGg0cVqNRxHTP0pimNzeXnVHXd96NK0np1oawikVIkovBR/4i5fe9TcrZbq8BeKNB2316o3vpsFVAKtN3X1kGrwF4pENR9PX23nblzrki6CAa/+x+6FcHgv4qosJ3ScVWwyC41T7rJahNGpSYFyayChPh94BgpbRg7ixmFiwLjJwYxcGpfQSBJ3xRayGEZTFD3zS2GuCpdUwQzfW+pOS8ogoH7+rwsYP/FgDVlS/Ixgqjkmxc6lswqSIj/ZCtGSiUWmnZQ7BxhFC4KrASogkD5kTHpoH0ZTFD3fSLIVemiQpj3lJrzgkIY4U/6sF1m31vKTFWeKMAIoVJgXkRFNguXEPKeHVTkNHNOZkHLQmK3eIUJtasCBmVAwQIVRBZAwy4phQnqvqstXqNBIcwgGLoQphsMg/8ubrnC4pylBRghVArMcxzStGw2KDJJnSsUMbU271BmQatDYrewMbgQWBnQwLosGRREVmKZOF0KE9J9+k/yJnDrHBTCdHZDIQth4GgoDK47UmFt3tICjBAqBeZ5HtW8aBYuIf4mc6sIPvCcyELbhsTOXqJwUWBlQOECFUTGrEP2pTAh3VfawiFMSt5qJsMwcFUxm41gHPVkpuZbAUYIlQLzIm6iWbiEZSIWufbOiSz0+ZDYGak4obwqYF8GFC5QQWQBPOySUpiQ7ittYeuucLC/YMovlYXBmJNll9sSjJrmNc08MjFy0ZyFJhSDCyFFA4oUWTlMSPfdhA8Www+o1Z9VarLtLxj6q9/z6nP3tQZBqb8c3kAbNK9DoaaZF2eMXDSM3bKJwYXAEKiOmpaIHTTXl6DKYQK6D1u4e/PPPvTC0LKrNdhfMBgCXirXP/DCnZ+qFY0xQowm2tSkUNPMBRolFw1jZzZRuCgwBGqeUGLVWF8dWzlMQPfNb8AH4H3zmxqy9uv+gsEwnoep5e7wf2oHpAyfh0ba1KRQ08xFGiUXDWNnNlG4KDAEap5QYtVYXx1bOUxJ970FcaYV1vZcX+1qbvsLBv9m+yIGgpdKmFVPkq23WYx62ljzahRqmnkhxsiFZVEvdssmBhcCs0DV1LRE7MBG1gwoEKa4++yTWKZ2qActyWqD/QWD3F9cwkvlLg7+iHoQB9U3i1FPG2tejUJNMxdelFxYFvViZzZRuCgwC9QkocTKRlYtLRwR7wNhirvPPollYmOhz8jV9/sLBr8PaJ/MdB3gX2eutTmMWto480oUapp5EcbIhWNRK3bLJgYXArNAUElNS8QOXGSNgEJhirvPPolltb+gbtbqbqvm+UX7AwZ/QDdPZupchJfqxsQYUC8oNq9IoaaZF2SMXDCLmrFbNjG4EBgDVVTTErEDjqwhUCBMSffxk1i+CTMDy7D6YH/BIH/8A/jqa93zW/C31aMxFgYDampTk0JNMxdllFw0jJ3ZROGiwBioUUKJVWN9dWxhMCXdx09i+TeYG2jYWq/7CwZDME9mmt2Ar9QKSBnx051qalOTQk0zF2WUXDSMndlE4aLAGKhRQolVY311bGEwJd1nn8SiMWu/8gNdagNow0gw7plITfjwk25qYtQ0r2nmkYwhYnMWkRMaIyiiFCmyMJiy7uMnsXjZqzPcXzD2mUh1QrE2/KQbO1FtUNO8ppnHLUYumrPQhGJwIaRoQJEiC4Mp6778J7F4+Swf7i8Y5Jv72JvyWOyKhhg1zWuaWdYQJReNWWg+UbgoqGhAUSoDCQUJVNZ9OU9i0dqFv+4vGOQtP/YmPCC1siFGTfOaZi60KLlozELzicJFQUUDappV1jlIoLLui/WgmXcyq2b7SDBxnlJzYNgomJrmNc08qjFEbM5CE4rBhZCiAUWKLAimtPu8rLXDVoFWgZgKtN0XU80Wq1WgigJt91VRq13bKhBTgbb7YqrZYrUKVFGg7b4qarVrWwViKqC6bzRaignZYrUKtAoEKHBmNFqGn19ZafLvFwLctEtaBVoFMgq8dWVl+P8pWC6nkrnlnAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left [ \\frac{0.375 \\sqrt{70} x^{2} y}{\\sqrt{\\pi}} - \\frac{0.125 \\sqrt{70} y^{3}}{\\sqrt{\\pi}}, \\quad \\frac{0.5 \\sqrt{105} x y z}{\\sqrt{\\pi}}, \\quad \\frac{0.625 \\sqrt{42} y z^{2}}{\\sqrt{\\pi}} - \\frac{0.125 \\sqrt{42} y}{\\sqrt{\\pi}}, \\quad \\frac{1.25 \\sqrt{7} z^{3}}{\\sqrt{\\pi}} - \\frac{0.75 \\sqrt{7} z}{\\sqrt{\\pi}}, \\quad \\frac{0.625 \\sqrt{42} x z^{2}}{\\sqrt{\\pi}} - \\frac{0.125 \\sqrt{42} x}{\\sqrt{\\pi}}, \\quad \\frac{0.25 \\sqrt{105} x^{2} z}{\\sqrt{\\pi}} - \\frac{0.25 \\sqrt{105} y^{2} z}{\\sqrt{\\pi}}, \\quad \\frac{0.125 \\sqrt{70} x^{3}}{\\sqrt{\\pi}} - \\frac{0.375 \\sqrt{70} x y^{2}}{\\sqrt{\\pi}}\\right ]$$"
      ],
      "text/plain": [
       "⎡           2                3                               2                \n",
       "⎢0.375⋅√70⋅x ⋅y   0.125⋅√70⋅y   0.5⋅√105⋅x⋅y⋅z  0.625⋅√42⋅y⋅z    0.125⋅√42⋅y  \n",
       "⎢────────────── - ────────────, ──────────────, ────────────── - ───────────, \n",
       "⎣      √π              √π             √π              √π              √π      \n",
       "\n",
       "         3                           2                           2            \n",
       "1.25⋅√7⋅z    0.75⋅√7⋅z  0.625⋅√42⋅x⋅z    0.125⋅√42⋅x  0.25⋅√105⋅x ⋅z   0.25⋅√1\n",
       "────────── - ─────────, ────────────── - ───────────, ────────────── - ───────\n",
       "    √π           √π           √π              √π            √π               √\n",
       "\n",
       "    2               3                2⎤\n",
       "05⋅y ⋅z  0.125⋅√70⋅x    0.375⋅√70⋅x⋅y ⎥\n",
       "───────, ──────────── - ──────────────⎥\n",
       "π             √π              √π      ⎦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lmax = 3\n",
    "for l in range(lmax + 1):\n",
    "    display([Yxyz(l, m, x, y, z) for m in range(-l, l + 1)],)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From [Wikipedia](https://en.wikipedia.org/wiki/Table_of_spherical_harmonics#Real_spherical_harmonics), the real spherical harmonics up to degree $l = 3$ on the unit sphere are:\n",
    "\n",
    "\n",
    "$\\frac{1}{2} \\sqrt{\\frac{1}{\\pi}}$\n",
    "\n",
    "$\\sqrt{\\frac{3}{4 \\pi}} \\cdot y, \n",
    "\\sqrt{\\frac{3}{4 \\pi}} \\cdot z,\n",
    "\\sqrt{\\frac{3}{4 \\pi}} \\cdot x$\n",
    "\n",
    "$\\frac{1}{2} \\sqrt{\\frac{15}{\\pi}} \\cdot x y,\n",
    "\\frac{1}{2} \\sqrt{\\frac{15}{\\pi}} \\cdot y z,\n",
    "\\frac{1}{4} \\sqrt{\\frac{5}{\\pi}} \\cdot (- x^2 - y^2 + 2 z^2),\n",
    "\\frac{1}{2} \\sqrt{\\frac{15}{\\pi}} \\cdot z x,\n",
    "\\frac{1}{4} \\sqrt{\\frac{15}{\\pi}} \\cdot (x^2 - y^2)$\n",
    "\n",
    "$\\frac{1}{4} \\sqrt{\\frac{35}{2 \\pi}} \\cdot \\left( 3 x^2 - y^2 \\right) y,\n",
    "\\frac{1}{2} \\sqrt{\\frac{105}{\\pi}} \\cdot xy z,\n",
    "\\frac{1}{4} \\sqrt{\\frac{21}{2 \\pi}} \\cdot y (4 z^2 - x^2 - y^2),\n",
    "\\frac{1}{4} \\sqrt{\\frac{7}{\\pi}} \\cdot z (2 z^2 - 3 x^2 - 3 y^2),\n",
    "\\frac{1}{4} \\sqrt{\\frac{21}{2 \\pi}} \\cdot x (4 z^2 - x^2 - y^2),\n",
    "\\frac{1}{4} \\sqrt{\\frac{105}{\\pi}} \\cdot \\left( x^2 - y^2 \\right) z,\n",
    "\\frac{1}{4} \\sqrt{\\frac{35}{2 \\pi}} \\cdot \\left( x^2 - 3 y^2 \\right) x$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recalling that $z^2 = 1 - x^2 - y^2$, the expressions agree.\n",
    "\n",
    "■"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $Y_{lm}(x, y)$\n",
    "\n",
    "#### Code to compute the spherical harmonic $Y_{lm}(x,y)$ (expressions where powers of $z$ are reduced to powers of $x$ and $y$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMgAAAA7BAMAAADMcNgaAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMkS7zRCZdiKJ71Rmq90icBAQAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEyElEQVRYCe1YTYscVRS91dNd/TXd06ggzCLTLlyIqA2iWbjpjUbwg14EBTdTEIMILjoEDAQCDf6AHrIYXAg2IoiIOETJJgsHkYHECC0KQdxMghpBI2OIIISo59z7qt+rntEwUBU3Xuj7bp0677z6elXvtMj+4uTa/vj7ZkddkTZ+UsWvqLgbwqsDpNK0qCFEnoT0wyr/VmGDxENIr0enkNs8n0JiTOVnz/CCVRMMNC1ilHWK3uow13ZExvjlHx9AMnrvCRX+BY/Adv5DSPQ7RKu95YjaR0SW+ixyjsUJBBeGB+rUPSnSKOKexH2Il0etY2jkkYGUExY5x0IvEFzp4KSC7bzKcnh5xl2JN/NSDnTaCTb+YqAdb0i9izbvmD+TaifvEaBng9SPHKX2ykgqBYwhLb3xb8o3FMfTVUhUJ5T9iSchckHkpT7avKPEGS9XBA+WzvhiXpDvcBCRT3mlDmlZQHrVNK+iqehZFTCGLKtoPUGzOC1iAGq2Npi3mNod5iKi0odqaa2EAc4XoW+aZ9Hcc+7jgdR6xQ3S7Ip8xFdXPChukP+V3RdCPxPFpf/8OlffvxOHcCXHQaKuExsGonf9y2uwGvAExH+KkEff8cKJB0Ue8uwIk7q07bfTauviqU7Gn5CoYMpwLQVDHwPfUbkc/SFS35wxy5jU9eTe6QxwxWfXo22RwJ+QaGCGaoKeR98RJ9EEpB/wu6bkV5DLX9w//92ovTjlip7+xH0ZQXSg9kuTCaqPUUH6jsZGdYr9r6MHl1VSo/rSVyyz0Ro2J+ZPzDoo0cAM0QTpY0yQvmN1pKvOMS7cnyTrp2n5+AbrTDQ6rQQdd1LroEQDMzwTJM8E6TsaHaxucQk2RW6Q3KD88WhCMBPj0YEBAPiTpT53KNGB3E7DCYKnguo7Spfe5u64J/IhixUqHYy217gRxicnjnIT/sSsgxIdGPKcIHgquDjRnZ8zc231FIsLTE/LpQ7bMNxqAv6knBBXogNDnogKgqeCcV93fsvMtdVBFi8z7RU/G4gVpN5EIzowy1dBrjQpuNDjzvgGDzr6TeQ1bj7KtEfEt9ALgTsYb6JVYgpyexYmyDtNwXC1Xrsucpq852ZkFJXnf0V8z6NIA8tIsw4hcW+eCrYT9OS3ZAeP5k0RtWs/AltyYCrMVjG08CdmHWbEkIXa9QVPBefPZEB6eIBz3XUTZ1LR4jZE8ISCNsj646z5AtOwvgY6yBrvTwKiAzNE66sWALj6jvqo1UeNp6vyLrlfMzmQ5Sy8PzHroEQHzkgoXF88XSqovqM90pPgnLlGLp9vcSDLWXh/Yi9IJTpwRkLh+nIaUVB9R7vLB0tnPBrnpByoQJq8PzGEEyE1LSmHrevLGa9hvqPJ92556LBGVwsFHZQ2WX/iiAqmDGu176EUs5dCm/qrPC5GvKaNglr5dBWl9yeOSHAu2NfzlnWv/tH0ZUqMJh5MMWv13e79iREVzPKEgp6nvmMxIecyk8Z3zAYakOYtFoE/UaKCKcNa7et5lT7gB+Q+iNpFIuswk4IsfOzyJyQa6EmstO95j53FLHzm3GMib3ismaSgx1jt8ickKpjlqWDoY5pdaeirS79HjnwGnyUFs513+xMQFczytO8d9TF/AzkArFY6jJReAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{\\left(\\frac{k}{2}\\right)!}{\\left(\\frac{q}{2}\\right)! \\left(\\frac{k}{2} - \\frac{p}{2}\\right)! \\left(\\frac{p}{2} - \\frac{q}{2}\\right)!}$$"
      ],
      "text/plain": [
       "         ⎛k⎞          \n",
       "         ⎜─⎟!         \n",
       "         ⎝2⎠          \n",
       "──────────────────────\n",
       "⎛q⎞  ⎛k   p⎞  ⎛p   q⎞ \n",
       "⎜─⎟!⋅⎜─ - ─⎟!⋅⎜─ - ─⎟!\n",
       "⎝2⎠  ⎝2   2⎠  ⎝2   2⎠ "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def C(p, q, k):\n",
    "    \"\"\"Return the binomial theorem coefficient `C`.\"\"\"\n",
    "    return factorial(k / 2) / (factorial(q / 2) * factorial((k - p) / 2) * factorial((p - q) / 2))\n",
    "\n",
    "# Print it\n",
    "C(p, q, k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Y(l, m, x, y):\n",
    "    \"\"\"Return the spherical harmonic of degree `l` and order `m`.\"\"\"\n",
    "    res = 0\n",
    "    z = sqrt(1 - x ** 2 - y ** 2)\n",
    "    if (m >= 0):\n",
    "        for j in range(0, m + 1, 2):\n",
    "            for k in range(0, l - m + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k) * x ** (m - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - m + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k - 1) * x ** (m - j + p - q) * y ** (j + q) * z          \n",
    "    else:\n",
    "        for j in range(1, abs(m) + 1, 2):\n",
    "            for k in range(0, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k) * x ** (abs(m) - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k - 1) * x ** (abs(m) - j + p - q) * y ** (j + q) * z\n",
    "\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check that if we set $z^2 = 1 - x^2 - y^2$ our expressions $Y_{lm}(x, y, z)$ and $Y_{lm}(x, y)$ agree:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABIAAAAUBAMAAAByuXB5AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdt3NMolEEJlmVCLvu6sHwGgPAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAcklEQVQIHWMQMmEAgclqDGEMDBWRIQxAGsiyYijaAGZxHmBgNQCzeB8wcH0Hs/gfMLD9ArPqGxjYPoJZ+wMYWL5CWA0wFkIWqIMLooP3AgMnxBSgyRwQkxm0GGocwHoZSgWfQF0AdhbYLXhYQipgSSE1AB6wJC/cp2GPAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left [ 0\\right ]$$"
      ],
      "text/plain": [
       "[0]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGMAAAAUBAMAAABrMp7fAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdt3NMolEEJlmVCLvu6sHwGgPAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABI0lEQVQoFZ2RMUpDQRCGf6Mv63sSTHIAiyAEtAliZfVu4AtKIF1uYBIIWAgJiL2NneD2Fi830MIDeAElhRcIQZQU4ma2eTOzFma7/f79ZmdnUT/Gf1Z81EMHuOyeK8vc3KUSEotIOcFwKuNNaw6DjJT4GVFLxvfAWZCRUpkh+ZLxO5D3BSRGyu4M5aVI8QNcWAGJkTKeoDwXqfl2SpVDz0h5yrD1yVPsOHCaceiZVyYBxd2iFGLrNuaen4Sen1ve2GokuaVbKq+I1ZDfgAc5ZGKkuK/cbomCcF95HWSk4ABXqVnwAyVrXjDmlYh5ZVT7ABq8DdPeS1FqsjrEvEI8mbLYbx41KyiRToFMw4Iy0ClMVcOCcqtTxAHmlPp+gP+NNhq9X/q1VHeBPvVtAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left [ 0, \\quad 0, \\quad 0\\right ]$$"
      ],
      "text/plain": [
       "[0, 0, 0]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALMAAAAUBAMAAAA0IxGWAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdt3NMolEEJlmVCLvu6sHwGgPAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABUElEQVQ4EbWTPUoDURSFj9HJcyYEYxZgEQRBmyBWVrMDRxTBLjvwBwQLIQGxt7ETnN4i2YEWLsANKCncgIgoFuLLnSbvvnMryZQf53zcefc9tLcwiy/d7OEAOD/cj+yMuaubXAdNloh6G6cjXWFsvnQbOmcyUaePSLqqwhhugT2Vs5mom2NkX6rCGF6B4bEKmkzUS2PUf1SDMfwCR6UKmkzU/QHq76rBmPv26lYYtJmoHwosfIYNMNbwoZ0iDNqsUg+ImrCGnzpSm2zWB+JXlpE1RmyyxmEZHojNZOrmM9Lo8hGGF+BOXz6Tido/j8WuGoaxyfO4VDmbiRrruMjdR1hirFa6J/TDKUxWqc+W34BO+KuMud2VHLW1YAaTVWrJZqOgYjLcxznGptQJaTCGggQJm1KfkAZjrhUHGZtSX8cNMJaSHGNe3V4l2f+juU7vD0/IhUbD617bAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left [ 0, \\quad 0, \\quad 0, \\quad 0, \\quad 0\\right ]$$"
      ],
      "text/plain": [
       "[0, 0, 0, 0, 0]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQQAAAAUBAMAAACZh14WAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdt3NMolEEJlmVCLvu6sHwGgPAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABjklEQVRIDc2VPUoDQRzFH9Fk3Egw7gEsRCJok8LKam/giiHgKfwAwUJIQOwFsRPc3iK5QSw8gBdQUngBEVEsxP/MgDIzr/hX6nb5wXvvx+xHkG/gT6+LDvowZ5dFYnG821MxFtYyuJG+KMxUZj2Z28ThOIaMsbCWwRVahStgJ17LblHvRpAxGmaFjPlCq/AIjPajudYUzTcFo2FWyJgfsQqfwF4VzS1M0fhQMBpmhYz5EVEw76LQjuYGQzSeFYyFtQx+RBTmX4GtMpqblJgVHlyMsbCWwRdaBTmFVGFIFAhjYS3DxBX+jxthn6hRFRw5IE9KkzyOCaNhVsiYH5FTwANwnbyU98iSl5IwGmaFjLVcoVWQr8ZpdAiQr8ZcN4KM0TArZMwXWoVaZe4wiAbXcFKYl1CCMRbWMthCEZC/qe2lArXVcO5o8QlYDu8PYyysZXCFVsFfN6GC+9Ucp5AxsLCW/SiU6RrqSgYW1rJvBdMmcwdKxsJa5p4Ft5ORNZwTyBgLa5ko5Ctk5xdR3vkCbfKzgT+KDk8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left [ 0, \\quad 0, \\quad 0, \\quad 0, \\quad 0, \\quad 0, \\quad 0\\right ]$$"
      ],
      "text/plain": [
       "[0, 0, 0, 0, 0, 0, 0]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lmax = 3\n",
    "z = sqrt(1 - x ** 2 - y ** 2)\n",
    "for l in range(lmax + 1):\n",
    "    display([simplify(Yxyz(l, m, x, y, z) - Y(l, m, x, y)) for m in range(-l, l + 1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
