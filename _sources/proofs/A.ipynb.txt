{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Change of basis matrices\n",
    "\n",
    "## A1\n",
    "\n",
    "#### Code to compute the change of basis matrix $A_1$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by importing some stuff and defining our functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Using sympy version 1.1.2.dev\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math\n",
    "import sympy\n",
    "from sympy import *\n",
    "from sympy.functions.special.tensor_functions import KroneckerDelta\n",
    "\n",
    "# Initialize the session\n",
    "init_session(quiet=True)\n",
    "\n",
    "# I am using the dev version of sympy\n",
    "print(\"Using sympy version\", sympy.__version__)\n",
    "\n",
    "# Define our symbols\n",
    "x, y, z, mu, nu, l, m, j, k, p, q, n = symbols('x y z mu nu l m j k p q n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definitions from `bp.ipynb`\n",
    "def ptilde(n, x, y):\n",
    "    \"\"\"Return the n^th term in the polynomial basis.\"\"\"\n",
    "    l = floor(sqrt(n))\n",
    "    m = n - l * l - l\n",
    "    mu = l - m\n",
    "    nu = l + m\n",
    "    if (nu % 2 == 0):\n",
    "        i = mu // 2\n",
    "        j = nu // 2\n",
    "        k = 0\n",
    "    else:\n",
    "        i = (mu - 1) // 2\n",
    "        j = (nu - 1) // 2\n",
    "        k = 1\n",
    "    return x ** i * y ** j * sqrt(1 - x ** 2 - y ** 2) ** k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definitions from `ylmxyz.ipynb`\n",
    "def A(l, m):\n",
    "    \"\"\"A spherical harmonic normalization constant.\"\"\"\n",
    "    return sqrt((2 - KroneckerDelta(m, 0)) * (2 * l + 1) * factorial(l - m) / (4 * pi * factorial(l + m)))\n",
    "\n",
    "def B(l, m, j, k):\n",
    "    \"\"\"Another spherical harmonic normalization constant.\"\"\"\n",
    "    try: \n",
    "        ratio = factorial((l + m + k - 1) / 2) / factorial((-l + m + k - 1) / 2)\n",
    "    except ValueError:\n",
    "        ratio = 0\n",
    "    return 2 ** l * factorial(m) / (factorial(j) * factorial(k) * factorial(m - j) * factorial(l - m - k)) * ratio\n",
    "\n",
    "def C(p, q, k):\n",
    "    \"\"\"Return the binomial theorem coefficient `C`.\"\"\"\n",
    "    return factorial(k / 2) / (factorial(q / 2) * factorial((k - p) / 2) * factorial((p - q) / 2))\n",
    "\n",
    "def Y(l, m, x, y):\n",
    "    \"\"\"Return the spherical harmonic of degree `l` and order `m`.\"\"\"\n",
    "    res = 0\n",
    "    z = sqrt(1 - x ** 2 - y ** 2)\n",
    "    if (m >= 0):\n",
    "        for j in range(0, m + 1, 2):\n",
    "            for k in range(0, l - m + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k) * x ** (m - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - m + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k - 1) * x ** (m - j + p - q) * y ** (j + q) * z          \n",
    "    else:\n",
    "        for j in range(1, abs(m) + 1, 2):\n",
    "            for k in range(0, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k) * x ** (abs(m) - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k - 1) * x ** (abs(m) - j + p - q) * y ** (j + q) * z\n",
    "\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Coefficient(expression, term):\n",
    "    \"\"\"Return the coefficient multiplying `term` in `expression`.\"\"\"\n",
    "    # Get the coefficient\n",
    "    coeff = expression.coeff(term)\n",
    "    # Set any non-constants in this coefficient to zero. If the coefficient\n",
    "    # is not a constant, this is not the term we are interested in!\n",
    "    coeff = coeff.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)\n",
    "    return coeff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p_Y(l, m, lmax):\n",
    "    \"\"\"Return the polynomial basis representation of the spherical harmonic `Y_{lm}`.\"\"\"\n",
    "    ylm = Y(l, m, x, y)\n",
    "    res = [ylm.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)]\n",
    "    for n in range(1, (lmax + 1) ** 2):\n",
    "        res.append(Coefficient(ylm, ptilde(n, x, y)))\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def A1(lmax):\n",
    "    \"\"\"Return the change of basis matrix A1. The columns of this matrix are given by `p_Y`.\"\"\"\n",
    "    res = zeros((lmax + 1) ** 2, (lmax + 1) ** 2)\n",
    "    n = 0\n",
    "    for l in range(lmax + 1):\n",
    "        for m in range(-l, l + 1):\n",
    "            res[n] = p_Y(l, m, lmax)\n",
    "            n += 1\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can finally evaluate the change of basis matrix for $l_\\mathrm{max} = 2$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{0.5}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & 0\\\\0 & 0 & 0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.75 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}}\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{15}}{\\sqrt{\\pi}} & 0\\\\0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.75 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & - \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡0.5                                             0.5⋅√5                       \n",
       "⎢───    0       0       0        0        0      ──────       0         0     \n",
       "⎢ √π                                               √π                         \n",
       "⎢                                                                             \n",
       "⎢                     0.5⋅√3                                                  \n",
       "⎢ 0     0       0     ──────     0        0         0         0         0     \n",
       "⎢                       √π                                                    \n",
       "⎢                                                                             \n",
       "⎢             0.5⋅√3                                                          \n",
       "⎢ 0     0     ──────    0        0        0         0         0         0     \n",
       "⎢               √π                                                            \n",
       "⎢                                                                             \n",
       "⎢     0.5⋅√3                                                                  \n",
       "⎢ 0   ──────    0       0        0        0         0         0         0     \n",
       "⎢       √π                                                                    \n",
       "⎢                                                                             \n",
       "⎢                                               -0.75⋅√5             0.25⋅√15 \n",
       "⎢ 0     0       0       0        0        0     ─────────     0      ──────── \n",
       "⎢                                                   √π                  √π    \n",
       "⎢                                                                             \n",
       "⎢                                                          0.5⋅√15            \n",
       "⎢ 0     0       0       0        0        0         0      ───────      0     \n",
       "⎢                                                             √π              \n",
       "⎢                                                                             \n",
       "⎢                             0.5⋅√15                                         \n",
       "⎢ 0     0       0       0     ───────     0         0         0         0     \n",
       "⎢                                √π                                           \n",
       "⎢                                                                             \n",
       "⎢                                      0.5⋅√15                                \n",
       "⎢ 0     0       0       0        0     ───────      0         0         0     \n",
       "⎢                                         √π                                  \n",
       "⎢                                                                             \n",
       "⎢                                               -0.75⋅√5            -0.25⋅√15 \n",
       "⎢ 0     0       0       0        0        0     ─────────     0     ──────────\n",
       "⎣                                                   √π                  √π    \n",
       "\n",
       "⎤\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎦"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A1(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A2\n",
    "\n",
    "#### Code to compute the change of basis matrix $A_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definitions from `bp.ipynb`\n",
    "def gtilde(n, x, y):\n",
    "    \"\"\"Return the n^th term in the Green's basis.\"\"\"\n",
    "    l = floor(sqrt(n))\n",
    "    m = n - l * l - l\n",
    "    mu = l - m\n",
    "    nu = l + m\n",
    "    if (nu % 2 == 0):\n",
    "        I = [mu // 2]\n",
    "        J = [nu // 2]\n",
    "        K = [0]\n",
    "        C = [(mu + 2) // 2]\n",
    "    elif (l == 1) and (m == 0):\n",
    "        I = [0]\n",
    "        J = [0]\n",
    "        K = [1]\n",
    "        C = [1]\n",
    "    elif (mu == 1) and (l % 2 == 0):\n",
    "        I = [l - 2]\n",
    "        J = [1]\n",
    "        K = [1]\n",
    "        C = [3]\n",
    "    elif (mu == 1):\n",
    "        I = [l - 3, l - 1, l - 3]\n",
    "        J = [0, 0, 2]\n",
    "        K = [1, 1, 1]\n",
    "        C = [-1, 1, 4]\n",
    "    else:\n",
    "        I = [(mu - 5) // 2, (mu - 5) // 2, (mu - 1) // 2]\n",
    "        J = [(nu - 1) // 2, (nu + 3) // 2, (nu - 1) // 2]\n",
    "        K = [1, 1, 1]\n",
    "        C = [(mu - 3) // 2, -(mu - 3) // 2, -(mu + 3) // 2]\n",
    "    \n",
    "    res = 0\n",
    "    for i, j, k, c in zip(I, J, K, C):\n",
    "        res += c * x ** i * y ** j * sqrt(1 - x ** 2 - y ** 2) ** k\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p_G(n, lmax):\n",
    "    \"\"\"Return the polynomial basis representation of the Green's polynomial `g`.\"\"\"\n",
    "    g = gtilde(n, x, y)\n",
    "    res = [g.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)]\n",
    "    for n in range(1, (lmax + 1) ** 2):\n",
    "        res.append(Coefficient(g, ptilde(n, x, y)))\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def A2(lmax):\n",
    "    \"\"\"Return the change of basis matrix A2. The columns of the **inverse** of this matrix are given by `p_G`.\"\"\"\n",
    "    res = zeros((lmax + 1) ** 2, (lmax + 1) ** 2)\n",
    "    n = 0\n",
    "    for l in range(lmax + 1):\n",
    "        for m in range(-l, l + 1):\n",
    "            res[n] = p_G(n, lmax)\n",
    "            n += 1\n",
    "    return res.inv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & \\frac{1}{2} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & \\frac{1}{3} & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & - \\frac{1}{3} & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & \\frac{1}{2} & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & \\frac{1}{3} & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1   0   0  0   0    0     0    0   0⎤\n",
       "⎢                                    ⎥\n",
       "⎢0  1/2  0  0   0    0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   1  0   0    0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  1   0    0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0  1/3   0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0   0   -1/3   0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0   0    0    1/2   0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0   0    0     0   1/3  0⎥\n",
       "⎢                                    ⎥\n",
       "⎣0   0   0  0   0    0     0    0   1⎦"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A2(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A\n",
    "\n",
    "#### Code to compute the full change of basis matrix $A$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is now easy: it's just the dot product of the previous two matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def AFull(lmax):\n",
    "    \"\"\"Return the full change of basis matrix.\"\"\"\n",
    "    return A2(lmax) * A1(lmax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{0.5}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & 0\\\\0 & 0 & 0 & \\frac{0.25 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.25 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & \\frac{0.0833333333333333 \\sqrt{15}}{\\sqrt{\\pi}}\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.166666666666667 \\sqrt{15}}{\\sqrt{\\pi}} & 0\\\\0 & 0 & 0 & 0 & \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & \\frac{0.166666666666667 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.75 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & - \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡0.5                                                             0.5⋅√5       \n",
       "⎢───    0       0        0        0                0             ──────       \n",
       "⎢ √π                                                               √π         \n",
       "⎢                                                                             \n",
       "⎢                     0.25⋅√3                                                 \n",
       "⎢ 0     0       0     ───────     0                0                0         \n",
       "⎢                        √π                                                   \n",
       "⎢                                                                             \n",
       "⎢             0.5⋅√3                                                          \n",
       "⎢ 0     0     ──────     0        0                0                0         \n",
       "⎢               √π                                                            \n",
       "⎢                                                                             \n",
       "⎢     0.5⋅√3                                                                  \n",
       "⎢ 0   ──────    0        0        0                0                0         \n",
       "⎢       √π                                                                    \n",
       "⎢                                                                             \n",
       "⎢                                                               -0.25⋅√5      \n",
       "⎢ 0     0       0        0        0                0            ─────────     \n",
       "⎢                                                                   √π        \n",
       "⎢                                                                             \n",
       "⎢                                                                          -0.\n",
       "⎢ 0     0       0        0        0                0                0      ───\n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                              0.25⋅√15                                       \n",
       "⎢ 0     0       0        0     ────────            0                0         \n",
       "⎢                                 √π                                          \n",
       "⎢                                                                             \n",
       "⎢                                        0.166666666666667⋅√15                \n",
       "⎢ 0     0       0        0        0      ─────────────────────      0         \n",
       "⎢                                                  √π                         \n",
       "⎢                                                                             \n",
       "⎢                                                               -0.75⋅√5      \n",
       "⎢ 0     0       0        0        0                0            ─────────     \n",
       "⎣                                                                   √π        \n",
       "\n",
       "                                            ⎤\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                      0.0833333333333333⋅√15⎥\n",
       "        0             ──────────────────────⎥\n",
       "                                √π          ⎥\n",
       "                                            ⎥\n",
       "166666666666667⋅√15                         ⎥\n",
       "────────────────────            0           ⎥\n",
       "        √π                                  ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                            -0.25⋅√15       ⎥\n",
       "        0                   ──────────      ⎥\n",
       "                                √π          ⎦"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AFull(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
